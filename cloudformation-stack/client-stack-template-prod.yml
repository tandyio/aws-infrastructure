# This CloudFormation template bundles all VPC and network configurations into a single
# stack for each of my clients. Creates a Virtual Private Cloud with two subnets (Public
# and Private). Creates security groups usable by services running on the public subnet
# that authorize all traffic, only inbound requests or only outbound.
# 
# Internet Gateway, routing tables/rules and NAT Gateway with Elastic IPs are attached
# following this model: 
# https://docs.aws.amazon.com/vpc/latest/userguide/images/nat-gateway-diagram.png
# No inbound or outbound traffic is allowed to the private subnet outside of the NAT
# Gateway. 

AWSTemplateFormatVersion: "2010-09-09"

Resources:
  ClientVPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
  
  BiDirectionalSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: allows all inbound and outbound traffic
      VpcId:
        Ref: ClientVPC
      SecurityGroupIngress:
      - IpProtocol: "-1"
        FromPort: "-1"
        ToPort: "-1"
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: "-1"
        FromPort: "-1"
        ToPort: "-1"
        CidrIp: 0.0.0.0/0
  
  IngressOnlySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: allow only inbound traffic
      VpcId:
        Ref: ClientVPC
      SecurityGroupIngress:
      - IpProtocol: "-1"
        FromPort: "-1"
        ToPort: "-1"
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - CidrIp: 127.0.0.1/32
        IpProtocol: "-1"

  EgressOnlySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: allow only outbound traffic
      VpcId:
        Ref: ClientVPC
      SecurityGroupEgress:
      - IpProtocol: "-1"
        FromPort: "-1"
        ToPort: "-1"
        CidrIp: 0.0.0.0/0

  PublicSubnetNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId:
        Ref: ClientVPC

  PrivateSubnetNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId:
        Ref: ClientVPC

  EgressNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: 
        Ref: PublicSubnetNetworkAcl 
      RuleNumber: '100'
      Protocol: "-1"
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0 
      Icmp:
        Code: "-1"
        Type: "-1"
      
  IngressNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: 
        Ref: PublicSubnetNetworkAcl 
      RuleNumber: '100'
      Protocol: "-1"
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0 
      Icmp:
        Code: "-1"
        Type: "-1"

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: ClientVPC
      CidrBlock: 10.0.0.0/24

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: ClientVPC
      CidrBlock: 10.0.1.0/24 

  PublicSubnetAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId:
        Ref: PublicSubnetNetworkAcl
      SubnetId:
        Ref: PublicSubnet

  PrivateSubnetAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: 
        Ref: PrivateSubnetNetworkAcl
      SubnetId:
        Ref: PrivateSubnet
  
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: 
        Ref: ClientVPC
      InternetGatewayId: 
        Ref: InternetGateway

  NetworkInterface:
    Type: AWS::EC2::NetworkInterface
    Properties:
      GroupSet:
      - !Ref BiDirectionalSecurityGroup
      SourceDestCheck: true
      SubnetId:
        Ref: PublicSubnet

  ElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    DependsOn: VPCGatewayAttachment

  ElasticIPAssociation:
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId: !GetAtt ElasticIP.AllocationId
      NetworkInterfaceId: !Ref NetworkInterface

  NAT:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - ElasticIP
          - AllocationId
      SubnetId:
        Ref: PublicSubnet
  
  PublicRouteTable:
    Type: AWS::EC2::RouteTable 
    Properties:
      VpcId:
        Ref: ClientVPC

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: 
        Ref: ClientVPC

  IGWRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway

  NATRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NAT